// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/cdn.proto

package cdn

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type UploadImageRequest struct {
	Image                []byte   `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadImageRequest) Reset()         { *m = UploadImageRequest{} }
func (m *UploadImageRequest) String() string { return proto.CompactTextString(m) }
func (*UploadImageRequest) ProtoMessage()    {}
func (*UploadImageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_be5e2246a849b818, []int{0}
}

func (m *UploadImageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadImageRequest.Unmarshal(m, b)
}
func (m *UploadImageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadImageRequest.Marshal(b, m, deterministic)
}
func (m *UploadImageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadImageRequest.Merge(m, src)
}
func (m *UploadImageRequest) XXX_Size() int {
	return xxx_messageInfo_UploadImageRequest.Size(m)
}
func (m *UploadImageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadImageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UploadImageRequest proto.InternalMessageInfo

func (m *UploadImageRequest) GetImage() []byte {
	if m != nil {
		return m.Image
	}
	return nil
}

type Ack struct {
	ImageUrl             string   `protobuf:"bytes,1,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ack) Reset()         { *m = Ack{} }
func (m *Ack) String() string { return proto.CompactTextString(m) }
func (*Ack) ProtoMessage()    {}
func (*Ack) Descriptor() ([]byte, []int) {
	return fileDescriptor_be5e2246a849b818, []int{1}
}

func (m *Ack) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ack.Unmarshal(m, b)
}
func (m *Ack) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ack.Marshal(b, m, deterministic)
}
func (m *Ack) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ack.Merge(m, src)
}
func (m *Ack) XXX_Size() int {
	return xxx_messageInfo_Ack.Size(m)
}
func (m *Ack) XXX_DiscardUnknown() {
	xxx_messageInfo_Ack.DiscardUnknown(m)
}

var xxx_messageInfo_Ack proto.InternalMessageInfo

func (m *Ack) GetImageUrl() string {
	if m != nil {
		return m.ImageUrl
	}
	return ""
}

func init() {
	proto.RegisterType((*UploadImageRequest)(nil), "UploadImageRequest")
	proto.RegisterType((*Ack)(nil), "Ack")
}

func init() {
	proto.RegisterFile("proto/cdn.proto", fileDescriptor_be5e2246a849b818)
}

var fileDescriptor_be5e2246a849b818 = []byte{
	// 134 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2f, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x4f, 0x4e, 0xc9, 0xd3, 0x03, 0xb3, 0x94, 0xb4, 0xb8, 0x84, 0x42, 0x0b, 0x72, 0xf2,
	0x13, 0x53, 0x3c, 0x73, 0x13, 0xd3, 0x53, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x44,
	0xb8, 0x58, 0x33, 0x41, 0x7c, 0x09, 0x46, 0x05, 0x46, 0x0d, 0x9e, 0x20, 0x08, 0x47, 0x49, 0x89,
	0x8b, 0xd9, 0x31, 0x39, 0x5b, 0x48, 0x9a, 0x8b, 0x13, 0xcc, 0x8f, 0x2f, 0x2d, 0xca, 0x01, 0x2b,
	0xe0, 0x0c, 0xe2, 0x00, 0x0b, 0x84, 0x16, 0xe5, 0x18, 0x19, 0x72, 0x31, 0x3b, 0xa7, 0xe4, 0x09,
	0x69, 0x71, 0x71, 0x23, 0x19, 0x2b, 0x24, 0xac, 0x87, 0x69, 0x89, 0x14, 0x8b, 0x9e, 0x63, 0x72,
	0xb6, 0x06, 0x63, 0x12, 0x1b, 0xd8, 0x25, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x45, 0x1b,
	0xdb, 0xe2, 0x9c, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CdnClient is the client API for Cdn service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CdnClient interface {
	UploadImage(ctx context.Context, opts ...grpc.CallOption) (Cdn_UploadImageClient, error)
}

type cdnClient struct {
	cc grpc.ClientConnInterface
}

func NewCdnClient(cc grpc.ClientConnInterface) CdnClient {
	return &cdnClient{cc}
}

func (c *cdnClient) UploadImage(ctx context.Context, opts ...grpc.CallOption) (Cdn_UploadImageClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Cdn_serviceDesc.Streams[0], "/Cdn/UploadImage", opts...)
	if err != nil {
		return nil, err
	}
	x := &cdnUploadImageClient{stream}
	return x, nil
}

type Cdn_UploadImageClient interface {
	Send(*UploadImageRequest) error
	CloseAndRecv() (*Ack, error)
	grpc.ClientStream
}

type cdnUploadImageClient struct {
	grpc.ClientStream
}

func (x *cdnUploadImageClient) Send(m *UploadImageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cdnUploadImageClient) CloseAndRecv() (*Ack, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Ack)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CdnServer is the server API for Cdn service.
type CdnServer interface {
	UploadImage(Cdn_UploadImageServer) error
}

// UnimplementedCdnServer can be embedded to have forward compatible implementations.
type UnimplementedCdnServer struct {
}

func (*UnimplementedCdnServer) UploadImage(srv Cdn_UploadImageServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadImage not implemented")
}

func RegisterCdnServer(s *grpc.Server, srv CdnServer) {
	s.RegisterService(&_Cdn_serviceDesc, srv)
}

func _Cdn_UploadImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CdnServer).UploadImage(&cdnUploadImageServer{stream})
}

type Cdn_UploadImageServer interface {
	SendAndClose(*Ack) error
	Recv() (*UploadImageRequest, error)
	grpc.ServerStream
}

type cdnUploadImageServer struct {
	grpc.ServerStream
}

func (x *cdnUploadImageServer) SendAndClose(m *Ack) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cdnUploadImageServer) Recv() (*UploadImageRequest, error) {
	m := new(UploadImageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Cdn_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Cdn",
	HandlerType: (*CdnServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadImage",
			Handler:       _Cdn_UploadImage_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/cdn.proto",
}
